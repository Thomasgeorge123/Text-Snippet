# Generated by Django 4.0.2 on 2022-03-09 06:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(error_messages={'invalid': 'Enter a valid Emailwithout spaces', 'required': 'Email number is required'}, max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Email must be Valid', regex='^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$')], verbose_name='Email')),
                ('mobile_phone', models.CharField(error_messages={'invalid': 'Enter a valid 10 digit mobile numberwithout spaces, + or isd code.', 'required': 'Mobile number is required'}, max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be 10 digits without + or spaces.', regex='^\\d{10}$')], verbose_name='Mobile Number')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Active'), (1, 'Inactive')], default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PasswordRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minimumcharaters', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('maximumcharaters', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('specialcharaters', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('uppercase', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('lowercase', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Active'), (1, 'Inactive')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Active'), (1, 'Inactive')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='authentication.role')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
